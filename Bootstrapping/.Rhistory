# the different ControlRates intervals starting with 500 to 3000:
# At ControlRates interval of 500:
ControlRateInterval <- 500
# field A
fieldA.data <-
calculate_field_mean_SD_and_get_RR_EffSize(
field = fieldA, interval = ControlRateInterval
)
# field B
fieldB.data <-
calculate_field_mean_SD_and_get_RR_EffSize(
field = fieldB, interval = ControlRateInterval
)
# field C
fieldC.data <-
calculate_field_mean_SD_and_get_RR_EffSize(
field = fieldC, interval = ControlRateInterval
)
# field D
fieldD.data <-
calculate_field_mean_SD_and_get_RR_EffSize(
field = fieldD, interval = ControlRateInterval
)
# Now, we merge all these so we can plot them together later
my_list <- list(fieldA.data$Req.Rep.table.field, fieldB.data$Req.Rep.table.field,
fieldC.data$Req.Rep.table.field, fieldD.data$Req.Rep.table.field)
my_list_nms <- setNames(my_list, c("fieldA", "fieldB", "fieldC", "fieldD"))
Merged.EffectSize.500 <-
data.frame(rbindlist(lapply(my_list_nms, as.data.table), idcol = "id"))
Merged.EffectSize.500$interval <- 500
ControlRateInterval <- 1000
# field A
fieldA.data <-
calculate_field_mean_SD_and_get_RR_EffSize(
field = fieldA, interval = ControlRateInterval
)
# field B
fieldB.data <-
calculate_field_mean_SD_and_get_RR_EffSize(
field = fieldB, interval = ControlRateInterval
)
# field C
fieldC.data <-
calculate_field_mean_SD_and_get_RR_EffSize(
field = fieldC, interval = ControlRateInterval
)
# field D
fieldD.data <-
calculate_field_mean_SD_and_get_RR_EffSize(
field = fieldD, interval = ControlRateInterval
)
# Now, we merge all these so we can plot them together later
my_list <- list(fieldA.data$Req.Rep.table.field, fieldB.data$Req.Rep.table.field,
fieldC.data$Req.Rep.table.field, fieldD.data$Req.Rep.table.field)
my_list_nms <- setNames(my_list, c("fieldA", "fieldB", "fieldC", "fieldD"))
Merged.EffectSize.1000 <-
data.frame(rbindlist(lapply(my_list_nms, as.data.table), idcol = "id"))
Merged.EffectSize.1000$interval <- 1000
ControlRateInterval <- 2000
# field A
fieldA.data <-
calculate_field_mean_SD_and_get_RR_EffSize(
field = fieldA, interval = ControlRateInterval
)
# field B
fieldB.data <-
calculate_field_mean_SD_and_get_RR_EffSize(
field = fieldB, interval = ControlRateInterval
)
# field C
fieldC.data <-
calculate_field_mean_SD_and_get_RR_EffSize(
field = fieldC, interval = ControlRateInterval
)
# field D
fieldD.data <-
calculate_field_mean_SD_and_get_RR_EffSize(
field = fieldD, interval = ControlRateInterval
)
# Now, we merge all these so we can plot them together later
my_list <- list(fieldA.data$Req.Rep.table.field, fieldB.data$Req.Rep.table.field,
fieldC.data$Req.Rep.table.field, fieldD.data$Req.Rep.table.field)
my_list_nms <- setNames(my_list, c("fieldA", "fieldB", "fieldC", "fieldD"))
Merged.EffectSize.2000 <-
data.frame(rbindlist(lapply(my_list_nms, as.data.table), idcol = "id"))
Merged.EffectSize.2000$interval <- 2000
ControlRateInterval <- 3000
# field A
fieldA.data <-
calculate_field_mean_SD_and_get_RR_EffSize(
field = fieldA, interval = ControlRateInterval
)
# field B
fieldB.data <-
calculate_field_mean_SD_and_get_RR_EffSize(
field = fieldB, interval = ControlRateInterval
)
# field C
fieldC.data <-
calculate_field_mean_SD_and_get_RR_EffSize(
field = fieldC, interval = ControlRateInterval
)
# field D
fieldD.data <-
calculate_field_mean_SD_and_get_RR_EffSize(
field = fieldD, interval = ControlRateInterval
)
# Now, we merge all these so we can plot them together later
my_list <- list(fieldA.data$Req.Rep.table.field, fieldB.data$Req.Rep.table.field,
fieldC.data$Req.Rep.table.field, fieldD.data$Req.Rep.table.field)
my_list_nms <- setNames(my_list, c("fieldA", "fieldB", "fieldC", "fieldD"))
Merged.EffectSize.3000 <-
data.frame(rbindlist(lapply(my_list_nms, as.data.table), idcol = "id"))
Merged.EffectSize.3000$interval <- 3000
# First, install missing packages and load them
myPackages <-
c(
"multcompView",
"ggplot2",
"scales",
"data.table",
"reshape2",
"RColorBrewer",
"plyr",
"ggpmisc"
)
my.installed.packages <- installed.packages()
available.packages <- myPackages %in% my.installed.packages
if (sum(!available.packages) > 0) {
install.packages(myPackages[!available.packages])
}
# Load all required packages
lapply(myPackages, require, character.only = TRUE)
# function for question 1 and 2
get_question_1_and_2_answers <- function(field_or_seed) {
# range of planting dates
field_or_seed$Date <- gsub("T.*", "", field_or_seed$Timestamp)
field_or_seed$Time <- gsub(".*T|Z", "", field_or_seed$Timestamp)
# Range in days
field_or_seed$date_time <-
as.POSIXct(paste(field_or_seed$Date, field_or_seed$Time), tz = "UTC")
# field_or_seed$date_time <- paste(field_or_seed$Date, field_or_seed$Time)
# num_days <- round(difftime(max(as.POSIXct(field_or_seed$date_time)), min(as.POSIXct(field_or_seed$date_time))), 3)
num_days <-
round(difftime(max(as.POSIXct(
field_or_seed$date_time
)), min(as.POSIXct(
field_or_seed$date_time
)), units = "days"), 3)
range_from_start_to_end_date_in_days <-
ifelse(num_days <= 1,
paste0(num_days, " day"),
paste0(num_days, " days"))
# Range in span of date for the field
range_of_start_end_date <-
paste0(range(as.Date(field_or_seed$Date))[1], " to ", range(as.Date(field_or_seed$Date))[2])
field_or_seed$Date <- as.factor(field_or_seed$Date)
# time range each day
tt <- field_or_seed[, c("Date", "Time")]
time.range.each.day <- aggregate(data.frame(Time = strptime(do.call(paste, tt), '%F %R:%OS', tz = 'UTC')),
by = list(Date = tt$Date),
function(Time) {
paste(format(min(Time), '%T'),
format(max(Time), '%T'),
sep = ' to ')
})
rm(tt)
# Function to find more than an hour gap in consecutive rows
about_an_hour_gap <- function(field_or_seed) {
one_hour_thing <- {
}
for (i in 1:nrow(field_or_seed)) {
# i=3
if (i == nrow(field_or_seed))
{
break
} else
time.lapse <-
abs(as.numeric(
difftime(field_or_seed$date_time[i + 1], field_or_seed$date_time[i]),
units = "mins"
))
# find consecutive rows where the time is more than or equal 60 minutes and
# dates are the same
if (time.lapse >= 60 &
field_or_seed$Date[i + 1] == field_or_seed$Date[i]) {
one_hour_thing.tmp <- field_or_seed[i:(i + 1), ]
one_hour_thing <- rbind(one_hour_thing, one_hour_thing.tmp)
}
}
return(one_hour_thing)
}
about_an_hour_gap(field_or_seed)
one_hour_gap_time_stamp <- about_an_hour_gap(field_or_seed)
# function to calculate total time spent each day
time.elapsed.each.day.function <- function(x) {
difftime(max(as.POSIXct(x)), min(as.POSIXct(x)), units = "mins")
}
# time.range.each.day(tt)
time.elapsed.each.day <-
aggregate(date_time ~ Date, data = field_or_seed, FUN = time.elapsed.each.day.function)
colnames(time.elapsed.each.day) <-
c("Date", "Time_elapsed (minutes)")
observations.each.day <- table(field_or_seed$Date)
# Elapsed Dates
dates.elapsed.each.field.function <- function(x){
difftime(max(as.POSIXct(x)), min(as.POSIXct(x)), units = "days")
}
elapsed.dates.each.field <- as.integer(dates.elapsed.each.field.function(field_or_seed$Date))
return(
list(
observations.each.day = observations.each.day,
range_from_start_to_end_date_in_days = range_from_start_to_end_date_in_days,
range_of_start_end_date = range_of_start_end_date,
time.elapsed.each.day = time.elapsed.each.day,
elapsed.dates.each.field = elapsed.dates.each.field,
time.range.each.day = time.range.each.day,
one_hour_gap_time_stamp = one_hour_gap_time_stamp
)
)
}
# Functions to calculate cohen's d and Required Replicates
cohen.d <- function(m1, s1, m2, s2) {
cohens_d <- (abs(m1 - m2) / sqrt((s1 ^ 2 + s2 ^ 2) / 2))
return(cohens_d)
}
required.replicates <-
function (m1,
s1,
m2,
s2,
alpha = 0.05,
beta = 0.2) {
n <-
2 * ((((sqrt((s1 ^ 2 + s2 ^ 2) / 2
)) / (m1 - m2)) ^ 2) * (qnorm((1 - alpha / 2)) + qnorm((1 - beta))) ^ 2)
return(round(n, 0))
}
# Additional functions: They do anova and also calculate required replicates for fields
# We willl also perform ANOVA analysis with Tukey Test for paired comparision of
# mean for each field data as well as merged data at different ControlRate
# intervals. This function does Tukey HSD test and generates label for
# significant outcomes.
# Create function to get the labels for Tukey HSD:
generate_label_df <- function(TUKEY, variable) {
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels <- TUKEY[[variable]][, 4]
Tukey.labels <-
data.frame(multcompLetters(Tukey.levels)['Letters'])
#I need to put the labels in the same order as in the boxplot :
Tukey.labels$treatment = rownames(Tukey.labels)
Tukey.labels = Tukey.labels[order(Tukey.labels$treatment) ,]
return(Tukey.labels)
}
# This function does ANOVA and makes boxplots with Tukey statistics for
# comparing Mean yield.
get_my_box_plot <- function (field, plot_name = "the Field") {
field$CR.Date.Levels <- gsub("-", "_", field$CR.Date.Levels)
field$CR.Date.Levels <- as.factor(field$CR.Date.Levels)
model = lm(field$Yield ~ field$CR.Date.Levels)
ANOVA = aov(model)
# If residual degrees of freedom is less than or equal 1, don't do Tukey test;
# simply return ANOVA summary.
if (ANOVA$df.residual <= 1) {
return(summary.aov(ANOVA))
}
# Tukey test to study each pair of treatment :
TUKEY <-
TukeyHSD(x = ANOVA,
'field$CR.Date.Levels',
conf.level = 0.95)
# generate labels using function
labels <- generate_label_df(TUKEY , "field$CR.Date.Levels")
# rename columns for merging
names(labels) <- c('Letters', 'CR.Date.Levels')
# Obtain letter positions for y axis using means
yvalue <- aggregate(Yield ~ CR.Date.Levels, data = field, mean)
part2 <- merge(labels, yvalue) #merge dataframes
p <- ggplot(field, aes(x = CR.Date.Levels, y = Yield)) +
geom_blank() +
theme_bw() +
# theme(panel.grid.major = element_blank(),
# panel.grid.minor = element_blank()) +
labs(x = 'CR.Date.Levels', y = 'Mean Yield') +
ggtitle(paste0("CR.Date.Levels Vs Mean yield for ", plot_name),
expression(atop(italic(
"(Anova:TukeyHSD)"
), ""))) +
# ggtitle(paste0("CR.Date.Levels Vs Mean yield for ", plot_name)) +
theme(plot.title = element_text(hjust = 0.5, face = 'bold')) +
geom_boxplot(fill = 'grey', stat = "boxplot") +
# coord_cartesian(clip = 'off') +
geom_text(
data = part2,
aes(x = CR.Date.Levels, y = Yield, label = Letters),
vjust = -3.5,
hjust = -.5
) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
# geom_vline(aes(xintercept = 4.5), linetype = "dashed") +
theme(plot.title = element_text(vjust = -0.6)) +
coord_cartesian(ylim = c(min(field$Yield), max(field$Yield) + 10))
print(p)
}
calculate_field_mean_SD_and_get_RR_EffSize <-
function(
field, intervals = 1000, Single.Field.Analysis = TRUE, Date.Only = FALSE, printplot = FALSE){
options(warn=1)
plot_NAME <- (deparse(substitute(field)))
if(Single.Field.Analysis > 0){
# removing rows with NAs in Yield
sum(is.na(field$Yield))
# field <- field[!complete.cases(field$Yield), ]
field <- field[!is.na(field$Yield),]
# as.factor(fieldA$ControlRate)
# work on timestamp columns
field$Date <- gsub("T.*", "", field$Timestamp)
field$Time <- gsub(".*T|Z", "", field$Timestamp)
# Range in days
field$date_time <- as.POSIXct(paste(field$Date, field$Time), tz = "UTC")
# table.field <- table(as.factor(field$Date))
field$ControlRate.Levels <- as.factor(intervals * ceiling(field$ControlRate/intervals))
if(Date.Only < 1){
field$CR.Date.Levels <- as.factor(paste(field$ControlRate.Levels, field$Date, sep = "*"))
} else {
field$CR.Date.Levels <- as.factor(field$Date)
}
table.field <- table(as.factor(field$CR.Date.Levels))
field.Count <- setNames(aggregate(field$CR.Date.Levels,
by = list(field$CR.Date.Levels), FUN = length), c("CR.Date.Levels", "Count"))
field.mean <-
setNames(aggregate(
field$Yield,
by = list(field$CR.Date.Levels),
FUN = mean
),
c("CR.Date.Levels", "Mean"))
field.SD <-
setNames(aggregate(
field$Yield,
by = list(field$CR.Date.Levels),
FUN = sd
),
c("CR.Date.Levels", "SD"))
if(printplot == 1 ){
get_my_box_plot(field, plot_name = plot_NAME)
}
# plot individual fields with tukey test We will print box plot only if we
# want for certain ControlRates intervals. Otherwise we will have too many
# plots
} else {
temp.Field <- field
colnames(temp.Field)[colnames(temp.Field) == "CR.Date.Levels"] <- "ControlRate.Levels"
colnames(temp.Field)[colnames(temp.Field) == "Mean"] <- "Yield"
# get_my_box_plot(temp.Field)
field.SD  <-
as.data.frame(cbind(ControlRate = field["CR.Date.Levels"], SD = field["SD_pooled"]))
field.mean <-
as.data.frame(cbind(ControlRate = field["CR.Date.Levels"], Mean = field["Mean"]))
}
# Calculate Required replicate and Effect Size from each
# field for ControlRate i vs i+1
Req.Rep.table.field <- {}
for (i in 1:nrow(field.SD)){
if(i+1 > nrow(field.SD) ){
break
}
temp.Effect.size <-
cohen.d(
m1 = field.mean$Mean[i],
s1 = field.SD$SD[i],
m2 = field.mean$Mean[i + 1],
s2 = field.SD$SD[i + 1]
)
tmp.req.reps <-
required.replicates(
m1 = field.mean$Mean[i],
s1 = field.SD$SD[i],
m2 = field.mean$Mean[i + 1],
s2 = field.SD$SD[i + 1]
)
tmp.table <-
cbind(
Group = paste0(field.SD$CR.Date.Levels[i], " Vs ", field.SD$CR.Date.Levels[i + 1]),
EffectSize = temp.Effect.size,
RequiredReplicates = tmp.req.reps
)
Req.Rep.table.field <- rbind(Req.Rep.table.field, tmp.table)
}
if (Single.Field.Analysis > 0) {
return(
list(
field.mean = field.mean,
fieldSD = field.SD,
field.Count = field.Count,
Req.Rep.table.field = Req.Rep.table.field
)
)
} else{
return(list(Req.Rep.table.field = Req.Rep.table.field))
}
}
# all.files contains the file name of all csv files in our directory. I have decided to
# read all files from the system rather than reading one file at a time.
# using from github
all.files <- path.part2
# all.files contains the file name of all csv files in our directory. I have decided to
# read all files from the system rather than reading one file at a time.
# using from github
all.files <- path.part2
calculate_field_mean_SD_and_get_RR_EffSize <-
function(
field, intervals = 1000, Single.Field.Analysis = TRUE, Date.Only = FALSE, printplot = FALSE){
options(warn=1)
plot_NAME <- (deparse(substitute(field)))
if(Single.Field.Analysis > 0){
# removing rows with NAs in Yield
sum(is.na(field$Yield))
# field <- field[!complete.cases(field$Yield), ]
field <- field[!is.na(field$Yield),]
# as.factor(fieldA$ControlRate)
# work on timestamp columns
field$Date <- gsub("T.*", "", field$Timestamp)
field$Time <- gsub(".*T|Z", "", field$Timestamp)
# Range in days
field$date_time <- as.POSIXct(paste(field$Date, field$Time), tz = "UTC")
# table.field <- table(as.factor(field$Date))
field$ControlRate.Levels <- as.factor(intervals * ceiling(field$ControlRate/intervals))
if(Date.Only < 1){
field$CR.Date.Levels <- as.factor(paste(field$ControlRate.Levels, field$Date, sep = "*"))
} else {
field$CR.Date.Levels <- as.factor(field$Date)
}
table.field <- table(as.factor(field$CR.Date.Levels))
field.Count <- setNames(aggregate(field$CR.Date.Levels,
by = list(field$CR.Date.Levels), FUN = length), c("CR.Date.Levels", "Count"))
field.mean <-
setNames(aggregate(
field$Yield,
by = list(field$CR.Date.Levels),
FUN = mean
),
c("CR.Date.Levels", "Mean"))
field.SD <-
setNames(aggregate(
field$Yield,
by = list(field$CR.Date.Levels),
FUN = sd
),
c("CR.Date.Levels", "SD"))
if(printplot == 1 ){
get_my_box_plot(field, plot_name = plot_NAME)
}
# plot individual fields with tukey test We will print box plot only if we
# want for certain ControlRates intervals. Otherwise we will have too many
# plots
} else {
temp.Field <- field
colnames(temp.Field)[colnames(temp.Field) == "CR.Date.Levels"] <- "ControlRate.Levels"
colnames(temp.Field)[colnames(temp.Field) == "Mean"] <- "Yield"
# get_my_box_plot(temp.Field)
field.SD  <-
as.data.frame(cbind(ControlRate = field["CR.Date.Levels"], SD = field["SD_pooled"]))
field.mean <-
as.data.frame(cbind(ControlRate = field["CR.Date.Levels"], Mean = field["Mean"]))
}
# Calculate Required replicate and Effect Size from each
# field for ControlRate i vs i+1
Req.Rep.table.field <- {}
for (i in 1:nrow(field.SD)){
if(i+1 > nrow(field.SD) ){
break
}
temp.Effect.size <-
cohen.d(
m1 = field.mean$Mean[i],
s1 = field.SD$SD[i],
m2 = field.mean$Mean[i + 1],
s2 = field.SD$SD[i + 1]
)
tmp.req.reps <-
required.replicates(
m1 = field.mean$Mean[i],
s1 = field.SD$SD[i],
m2 = field.mean$Mean[i + 1],
s2 = field.SD$SD[i + 1]
)
tmp.table <-
cbind(
Group = paste0(field.SD$CR.Date.Levels[i], " Vs ", field.SD$CR.Date.Levels[i + 1]),
EffectSize = temp.Effect.size,
RequiredReplicates = tmp.req.reps
)
Req.Rep.table.field <- rbind(Req.Rep.table.field, tmp.table)
}
if (Single.Field.Analysis > 0) {
return(
list(
field.mean = field.mean,
fieldSD = field.SD,
field.Count = field.Count,
Req.Rep.table.field = Req.Rep.table.field
)
)
} else{
return(list(Req.Rep.table.field = Req.Rep.table.field))
}
}
# all.files contains the file name of all csv files in our directory. I have decided to
# read all files from the system rather than reading one file at a time.
# using from github
all.files <- path.part2
